#!/usr/bin/env node

const download = require('download-git-repo') // 从仓库拉取代码
const program = require('commander') // 用户命令行输入和参数解析工具
const exists = require('fs').existsSync // 文件是否存在
const path = require('path')
const ora = require('ora') // loading
const home = require('user-home') // 用户主目录
const tildify = require('tildify') // 绝对路径转相对路径
const chalk = require('chalk')
const inquirer = require('inquirer') // 命令行指令交互
const rm = require('rimraf').sync // 删除
const logger = require('../lib/logger')
const generate = require('../lib/generate')
const checkVersion = require('../lib/check-version')
const localPath = require('../lib/local-path')

const isLocalPath = localPath.isLocalPath
const getTemplatePath = localPath.getTemplatePath

/**
 * Usage.
 */

program
  .usage('<template-name> [project-name]')
  .option('-c, --clone', 'use git clone')
  .option('--offline', 'use cached template')

/**
 * Help.
 */

program.on('--help', () => {
  console.log('  Examples:')
  console.log()
  console.log(chalk.gray('    # create a new project with an official template'))
  console.log('    $ wool init webpack my-project')
  console.log()
  console.log(chalk.gray('    # create a new project straight from a github template'))
  console.log('    $ wool init username/repo my-project')
  console.log()
})

/**
 * Help.
 */

function help () {
  program.parse(process.argv)
  if (program.args.length < 1) return program.help()
}
help()

/**
 * Settings.
 */

let template = program.args[0] // 模板名称
const hasSlash = template.indexOf('/') > -1 // 斜杠判断是否为路径
const rawName = program.args[1] // 项目目录
const inPlace = !rawName || rawName === '.' // 默认当前
const name = inPlace ? path.relative('../', process.cwd()) : rawName // 当前或指定
const to = path.resolve(rawName || '.')
const clone = program.clone || false // 是否clone

const tmp = path.join(home, '.OkarinFE', template.replace(/\//g, '-')) // 远程模板下载到本地的路径
if (program.offline) {
  console.log(`> Use cached template at ${chalk.yellow(tildify(tmp))}`)
  template = tmp
}

/**
 * Padding.
 */

console.log()
process.on('exit', () => {
  console.log()
})

if (exists(to)) { // 已经存在询问是否构建否则直接构建
  inquirer.prompt([{
    type: 'confirm',
    message: inPlace
      ? 'Generate project in current directory?' : 'Target directory exists. Continue?',
    name: 'ok'
  }]).then(answers => {
    if (answers.ok) {
      run()
    }
  }).catch(logger.fatal)
} else {
  run()
}

/**
 * Check, download and generate the project.
 */

function run () {
  // check if template is local
  if (isLocalPath(template)) { // 是否本地模板
    const templatePath = getTemplatePath(template) // 获取绝对路径
    if (exists(templatePath)) { // 判断模板是否存在
      generate(name, templatePath, to, err => { // 渲染模板
        if (err) logger.fatal(err)
        console.log()
        logger.success('Generated "%s".', name)
      })
    } else { // 失败
      logger.fatal('Local template "%s" not found.', template)
    }
  } else { // 检查版本号
    checkVersion(() => {
      if (!hasSlash) { // 官方还是三方
        // use official templates
        const officialTemplate = 'OkarinFE/' + template
        downloadAndGenerate(officialTemplate)
      } else {
        downloadAndGenerate(template) // 下载三方
      }
    })
  }
}

/**
 * Download a generate from a template repo.
 *
 * @param {String} template
 */

function downloadAndGenerate (template) {
  const spinner = ora('downloading template')
  spinner.start() // 显示加载状态
  // Remove if local template exists
  if (exists(tmp)) rm(tmp) // 当前模板库是否存在该模板，存在就删除
  download(template, tmp, {
    clone
  }, err => {
    spinner.stop()
    if (err) logger.fatal('Failed to download repo ' + template + ': ' + err.message.trim())
    generate(name, tmp, to, err => {
      if (err) logger.fatal(err)
      console.log()
      logger.success('Generated "%s".', name)
    })
  })
}
